// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	class "project/dashboard/features/class"

	mock "github.com/stretchr/testify/mock"
)

// ClassData is an autogenerated mock type for the DataInterface type
type ClassData struct {
	mock.Mock
}

// DeleteAClass provides a mock function with given fields: classid
func (_m *ClassData) DeleteAClass(classid uint) (string, error) {
	ret := _m.Called(classid)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(classid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(classid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassUserid provides a mock function with given fields: classid
func (_m *ClassData) GetClassUserid(classid uint) uint {
	ret := _m.Called(classid)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(classid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// InsertClass provides a mock function with given fields: core
func (_m *ClassData) InsertClass(core class.CoreClass) (string, error) {
	ret := _m.Called(core)

	var r0 string
	if rf, ok := ret.Get(0).(func(class.CoreClass) string); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(class.CoreClass) error); ok {
		r1 = rf(core)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllClass provides a mock function with given fields: page
func (_m *ClassData) SelectAllClass(page int) ([]class.CoreClass, error) {
	ret := _m.Called(page)

	var r0 []class.CoreClass
	if rf, ok := ret.Get(0).(func(int) []class.CoreClass); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]class.CoreClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAClass provides a mock function with given fields: core, idclass
func (_m *ClassData) UpdateAClass(core class.CoreClass, idclass uint) (string, error) {
	ret := _m.Called(core, idclass)

	var r0 string
	if rf, ok := ret.Get(0).(func(class.CoreClass, uint) string); ok {
		r0 = rf(core, idclass)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(class.CoreClass, uint) error); ok {
		r1 = rf(core, idclass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClassData interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassData creates a new instance of ClassData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassData(t mockConstructorTestingTNewClassData) *ClassData {
	mock := &ClassData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
