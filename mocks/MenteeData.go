// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mentee "project/dashboard/features/mentee"

	mock "github.com/stretchr/testify/mock"
)

// MenteeData is an autogenerated mock type for the DataInterface type
type MenteeData struct {
	mock.Mock
}

// InsertData provides a mock function with given fields: data, idToken
func (_m *MenteeData) InsertData(data mentee.MenteeCore, idToken int) int {
	ret := _m.Called(data, idToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(mentee.MenteeCore, int) int); ok {
		r0 = rf(data, idToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SelectData provides a mock function with given fields: page, idToken
func (_m *MenteeData) SelectData(page int, idToken int) ([]mentee.Join, error) {
	ret := _m.Called(page, idToken)

	var r0 []mentee.Join
	if rf, ok := ret.Get(0).(func(int, int) []mentee.Join); ok {
		r0 = rf(page, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentee.Join)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: data, menteeid
func (_m *MenteeData) UpdateData(data mentee.MenteeCore, menteeid int) (string, error) {
	ret := _m.Called(data, menteeid)

	var r0 string
	if rf, ok := ret.Get(0).(func(mentee.MenteeCore, int) string); ok {
		r0 = rf(data, menteeid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(mentee.MenteeCore, int) error); ok {
		r1 = rf(data, menteeid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenteeData interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeData creates a new instance of MenteeData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeData(t mockConstructorTestingTNewMenteeData) *MenteeData {
	mock := &MenteeData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
